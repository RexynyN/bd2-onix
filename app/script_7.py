# go.mod
go_mod = """module biblioteca-api

go 1.21

require (
	github.com/gofiber/fiber/v2 v2.52.0
	github.com/lib/pq v1.10.9
	github.com/go-playground/validator/v10 v10.16.0
	github.com/joho/godotenv v1.5.1
)

require (
	github.com/andybalholm/brotli v1.0.5 // indirect
	github.com/gabriel-vasile/mimetype v1.4.2 // indirect
	github.com/go-playground/locales v0.14.1 // indirect
	github.com/go-playground/universal-translator v0.18.1 // indirect
	github.com/google/uuid v1.5.0 // indirect
	github.com/klauspost/compress v1.17.0 // indirect
	github.com/leodido/go-urn v1.2.4 // indirect
	github.com/mattn/go-colorable v0.1.13 // indirect
	github.com/mattn/go-isatty v0.0.20 // indirect
	github.com/mattn/go-runewidth v0.0.15 // indirect
	github.com/rivo/uniseg v0.2.0 // indirect
	github.com/valyala/bytebufferpool v1.0.0 // indirect
	github.com/valyala/fasthttp v1.51.0 // indirect
	github.com/valyala/tcplisten v1.0.0 // indirect
	golang.org/x/crypto v0.7.0 // indirect
	golang.org/x/net v0.8.0 // indirect
	golang.org/x/sys v0.15.0 // indirect
	golang.org/x/text v0.8.0 // indirect
)
"""

# Dockerfile
dockerfile = """# Build stage
FROM golang:1.21-alpine AS builder

WORKDIR /app

# Install dependencies
RUN apk add --no-cache git

# Copy go mod files
COPY go.mod go.sum ./
RUN go mod download

# Copy source code
COPY . .

# Build the application
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .

# Final stage
FROM alpine:latest

# Install ca-certificates for HTTPS
RUN apk --no-cache add ca-certificates tzdata

WORKDIR /root/

# Copy the binary from builder stage
COPY --from=builder /app/main .

# Expose port
EXPOSE 3000

# Command to run
CMD ["./main"]
"""

# docker-compose.yml
docker_compose = """version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: biblioteca_postgres
    environment:
      POSTGRES_DB: biblioteca
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build: .
    container_name: biblioteca_api
    environment:
      DATABASE_URL: "host=postgres port=5432 user=postgres password=postgres dbname=biblioteca sslmode=disable"
      PORT: "3000"
      ENVIRONMENT: "production"
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: biblioteca_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@biblioteca.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "8080:80"
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin

volumes:
  postgres_data:
  pgadmin_data:
"""

# .env.example
env_example = """# Configura√ß√µes do Banco de Dados
DATABASE_URL=host=localhost port=5432 user=postgres password=postgres dbname=biblioteca sslmode=disable

# Configura√ß√µes do Servidor
PORT=3000
ENVIRONMENT=development

# Configura√ß√µes opcionais
LOG_LEVEL=info
CORS_ORIGINS=http://localhost:3000,http://localhost:8080
"""

# Makefile
makefile = """# Makefile para o projeto Biblioteca API

.PHONY: help build run test clean docker-up docker-down install dev

# Vari√°veis
BINARY_NAME=biblioteca-api
DOCKER_COMPOSE_FILE=docker-compose.yml

help: ## Mostra esta ajuda
	@echo "Comandos dispon√≠veis:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\\033[36m%-15s\\033[0m %s\\n", $$1, $$2}'

install: ## Instala as depend√™ncias
	go mod download
	go mod tidy

build: ## Compila a aplica√ß√£o
	go build -o $(BINARY_NAME) .

run: ## Executa a aplica√ß√£o
	go run .

dev: ## Executa em modo desenvolvimento com reload
	go run . --dev

test: ## Executa os testes
	go test -v ./...

test-coverage: ## Executa testes com cobertura
	go test -v -cover ./...

clean: ## Remove arquivos gerados
	go clean
	rm -f $(BINARY_NAME)

docker-build: ## Constr√≥i a imagem Docker
	docker build -t $(BINARY_NAME) .

docker-up: ## Sobe os containers
	docker-compose -f $(DOCKER_COMPOSE_FILE) up -d

docker-down: ## Para os containers
	docker-compose -f $(DOCKER_COMPOSE_FILE) down

docker-logs: ## Mostra logs dos containers
	docker-compose -f $(DOCKER_COMPOSE_FILE) logs -f

docker-rebuild: ## Reconstr√≥i e sobe os containers
	docker-compose -f $(DOCKER_COMPOSE_FILE) down
	docker-compose -f $(DOCKER_COMPOSE_FILE) up --build -d

setup-db: ## Configura o banco de dados
	@echo "Configurando banco de dados..."
	@echo "Aguarde a inicializa√ß√£o do PostgreSQL..."
	sleep 10
	@echo "Banco configurado!"

format: ## Formata o c√≥digo
	go fmt ./...

lint: ## Executa linter
	golangci-lint run

security: ## Verifica vulnerabilidades
	gosec ./...

mod-update: ## Atualiza depend√™ncias
	go get -u ./...
	go mod tidy

.DEFAULT_GOAL := help
"""

# README.md
readme = """# Sistema de Gerenciamento de Biblioteca - API

Uma API REST completa para gerenciamento de bibliotecas, desenvolvida em Go com Fiber framework e PostgreSQL.

## üöÄ Caracter√≠sticas

- **CRUD completo** para todas as entidades (Usu√°rios, Bibliotecas, M√≠dias, Empr√©stimos, etc.)
- **Sistema de empr√©stimos** com controle de datas e renova√ß√µes
- **Gerenciamento de penaliza√ß√µes** por atraso
- **Dashboard com estat√≠sticas** e relat√≥rios
- **Busca global** em m√∫ltiplas entidades
- **Pagina√ß√£o** em todas as listagens
- **Valida√ß√£o de dados** robusta
- **Tratamento de erros** padronizado
- **Documenta√ß√£o** completa da API

## üèóÔ∏è Arquitetura

O projeto segue uma arquitetura limpa e organizada:

```
biblioteca-api/
‚îú‚îÄ‚îÄ cmd/                    # Ponto de entrada da aplica√ß√£o
‚îú‚îÄ‚îÄ config/                 # Configura√ß√µes
‚îú‚îÄ‚îÄ database/              # Conex√£o e schemas do banco
‚îú‚îÄ‚îÄ handlers/              # Controladores HTTP
‚îú‚îÄ‚îÄ models/                # Modelos de dados
‚îú‚îÄ‚îÄ routes/                # Defini√ß√£o das rotas
‚îú‚îÄ‚îÄ utils/                 # Utilit√°rios e helpers
‚îú‚îÄ‚îÄ docker-compose.yml     # Configura√ß√£o Docker
‚îú‚îÄ‚îÄ Dockerfile            # Imagem Docker
‚îú‚îÄ‚îÄ Makefile              # Comandos automatizados
‚îî‚îÄ‚îÄ README.md             # Esta documenta√ß√£o
```

## üõ†Ô∏è Tecnologias Utilizadas

- **Go 1.21+** - Linguagem de programa√ß√£o
- **Fiber v2** - Framework web r√°pido e minimalista
- **PostgreSQL** - Banco de dados relacional
- **Docker & Docker Compose** - Containeriza√ß√£o
- **database/sql** - Driver nativo do PostgreSQL (sem ORM)

## üì¶ Instala√ß√£o e Execu√ß√£o

### Pr√©-requisitos

- Go 1.21 ou superior
- PostgreSQL 13+
- Docker e Docker Compose (opcional)

### M√©todo 1: Execu√ß√£o Local

1. **Clone o reposit√≥rio:**
```bash
git clone <repository-url>
cd biblioteca-api
```

2. **Instale as depend√™ncias:**
```bash
make install
# ou
go mod download
```

3. **Configure as vari√°veis de ambiente:**
```bash
cp .env.example .env
# Edite o arquivo .env conforme necess√°rio
```

4. **Configure o PostgreSQL:**
```bash
# Crie o banco de dados
createdb biblioteca

# Execute as migra√ß√µes (o schema ser√° criado automaticamente na primeira execu√ß√£o)
```

5. **Execute a aplica√ß√£o:**
```bash
make run
# ou
go run .
```

### M√©todo 2: Docker (Recomendado)

1. **Clone o reposit√≥rio:**
```bash
git clone <repository-url>
cd biblioteca-api
```

2. **Suba os containers:**
```bash
make docker-up
```

3. **Verifique os logs:**
```bash
make docker-logs
```

A API estar√° dispon√≠vel em `http://localhost:3000`
O pgAdmin estar√° dispon√≠vel em `http://localhost:8080` (admin@biblioteca.com / admin123)

## üìñ Uso da API

### Endpoints Principais

#### Autentica√ß√£o
A API n√£o implementa autentica√ß√£o por padr√£o, mas √© estruturada para facilitar a adi√ß√£o de JWT ou OAuth.

#### Usu√°rios
```http
GET    /api/v1/usuarios              # Lista usu√°rios
GET    /api/v1/usuarios/{id}         # Busca usu√°rio por ID
POST   /api/v1/usuarios              # Cria usu√°rio
PUT    /api/v1/usuarios/{id}         # Atualiza usu√°rio
DELETE /api/v1/usuarios/{id}         # Remove usu√°rio
GET    /api/v1/usuarios/{id}/emprestimos # Empr√©stimos do usu√°rio
```

#### Bibliotecas
```http
GET    /api/v1/bibliotecas           # Lista bibliotecas
GET    /api/v1/bibliotecas/{id}      # Busca biblioteca por ID
POST   /api/v1/bibliotecas           # Cria biblioteca
PUT    /api/v1/bibliotecas/{id}      # Atualiza biblioteca
DELETE /api/v1/bibliotecas/{id}      # Remove biblioteca
GET    /api/v1/bibliotecas/{id}/midias # M√≠dias da biblioteca
```

#### Livros
```http
GET    /api/v1/livros                # Lista livros
GET    /api/v1/livros/{id}           # Busca livro por ID
POST   /api/v1/livros                # Cria livro
PUT    /api/v1/livros/{id}           # Atualiza livro
DELETE /api/v1/livros/{id}           # Remove livro
POST   /api/v1/livros/{id}/autores   # Adiciona autor ao livro
DELETE /api/v1/livros/{id}/autores/{autor_id} # Remove autor do livro
```

#### Empr√©stimos
```http
GET    /api/v1/emprestimos           # Lista empr√©stimos
GET    /api/v1/emprestimos/{id}      # Busca empr√©stimo por ID
POST   /api/v1/emprestimos           # Cria empr√©stimo
PUT    /api/v1/emprestimos/{id}/devolver # Devolve empr√©stimo
PUT    /api/v1/emprestimos/{id}/renovar  # Renova empr√©stimo
GET    /api/v1/emprestimos/atrasados      # Lista empr√©stimos em atraso
```

#### Dashboard
```http
GET    /api/v1/dashboard             # Estat√≠sticas gerais
GET    /api/v1/dashboard/estatisticas     # Estat√≠sticas detalhadas
GET    /api/v1/dashboard/emprestimos-por-mes # Gr√°fico empr√©stimos/m√™s
GET    /api/v1/dashboard/livros-mais-emprestados # Top livros
```

#### Busca Global
```http
GET    /api/v1/search?q={termo}     # Busca em m√∫ltiplas entidades
```

### Exemplos de Requisi√ß√µes

#### Criar um usu√°rio:
```bash
curl -X POST http://localhost:3000/api/v1/usuarios \\
  -H "Content-Type: application/json" \\
  -d '{
    "nome": "Jo√£o Silva",
    "email": "joao@email.com",
    "endereco": "Rua das Flores, 123",
    "telefone": "(11) 99999-9999"
  }'
```

#### Criar um livro:
```bash
curl -X POST http://localhost:3000/api/v1/livros \\
  -H "Content-Type: application/json" \\
  -d '{
    "titulo": "O Senhor dos An√©is",
    "isbn": "978-0544003415",
    "numero_paginas": 1178,
    "editora": "Martins Fontes",
    "data_publicacao": "2019-11-25T00:00:00Z",
    "tipo_midia": "livro",
    "condicao": "novo",
    "id_biblioteca": 1
  }'
```

#### Fazer um empr√©stimo:
```bash
curl -X POST http://localhost:3000/api/v1/emprestimos \\
  -H "Content-Type: application/json" \\
  -d '{
    "data_emprestimo": "2024-01-15T10:00:00Z",
    "data_devolucao_prevista": "2024-01-30T10:00:00Z",
    "id_midia": 1,
    "id_usuario": 1
  }'
```

### Par√¢metros de Query Comuns

- `page` - N√∫mero da p√°gina (padr√£o: 1)
- `limit` - Itens por p√°gina (padr√£o: 10)
- `search` - Termo de busca
- `status` - Filtro por status
- `tipo` - Filtro por tipo de m√≠dia

## üóÉÔ∏è Modelo de Dados

### Entidades Principais

1. **Usuario** - Informa√ß√µes dos usu√°rios da biblioteca
2. **Biblioteca** - Dados das bibliotecas
3. **Midia** - Base para todos os tipos de m√≠dia
4. **Livros/Revistas/DVDs/Artigos** - Tipos espec√≠ficos de m√≠dia
5. **Emprestimo** - Controle de empr√©stimos
6. **Penalizacao** - Multas e penaliza√ß√µes
7. **Autores** - Informa√ß√µes dos autores
8. **Autorias** - Relacionamento entre autores e m√≠dias

### Relacionamentos

- Um usu√°rio pode ter m√∫ltiplos empr√©stimos
- Uma m√≠dia pode ter m√∫ltiplos autores
- Uma biblioteca pode ter m√∫ltiplas m√≠dias
- Um empr√©stimo pode gerar penaliza√ß√µes

## üß™ Testes

```bash
# Executar todos os testes
make test

# Executar testes com cobertura
make test-coverage
```

## üìã Funcionalidades Especiais

### Sistema de Empr√©stimos
- Controle autom√°tico de disponibilidade
- C√°lculo autom√°tico de datas de devolu√ß√£o
- Renova√ß√£o de empr√©stimos
- Controle de atrasos

### Sistema de Penaliza√ß√µes
- Multas autom√°ticas por atraso
- Bloqueio de usu√°rios com penaliza√ß√µes ativas
- Controle de valores e prazos

### Dashboard e Relat√≥rios
- Estat√≠sticas em tempo real
- Gr√°ficos de empr√©stimos por per√≠odo
- Rankings de livros e usu√°rios
- Distribui√ß√£o de m√≠dias por biblioteca

## üîß Configura√ß√£o

### Vari√°veis de Ambiente

| Vari√°vel | Descri√ß√£o | Padr√£o |
|----------|-----------|---------|
| `DATABASE_URL` | String de conex√£o PostgreSQL | `host=localhost port=5432 user=postgres password=postgres dbname=biblioteca sslmode=disable` |
| `PORT` | Porta do servidor | `3000` |
| `ENVIRONMENT` | Ambiente (development/production) | `development` |

### Configura√ß√£o do Banco

O schema do banco √© criado automaticamente na primeira execu√ß√£o. Para customizar, edite o arquivo `database/database.go`.

## üöÄ Deploy

### Docker Production

```bash
# Build da imagem
docker build -t biblioteca-api:latest .

# Run do container
docker run -d \\
  --name biblioteca-api \\
  -p 3000:3000 \\
  -e DATABASE_URL="sua-string-de-conexao" \\
  biblioteca-api:latest
```

### Deploy em Cloud

A aplica√ß√£o est√° preparada para deploy em:
- Heroku
- Railway
- Render
- AWS ECS
- Google Cloud Run

## ü§ù Contribui√ß√£o

1. Fork o projeto
2. Crie uma branch para sua feature (`git checkout -b feature/AmazingFeature`)
3. Commit suas mudan√ßas (`git commit -m 'Add some AmazingFeature'`)
4. Push para a branch (`git push origin feature/AmazingFeature`)
5. Abra um Pull Request

## üìÑ Licen√ßa

Este projeto est√° sob a licen√ßa MIT. Veja o arquivo `LICENSE` para mais detalhes.

## üìû Suporte

Para d√∫vidas ou problemas:
- Abra uma issue no GitHub
- Entre em contato atrav√©s do email: [seu-email@exemplo.com]

## üèÜ Status do Projeto

‚úÖ CRUD b√°sico para todas entidades  
‚úÖ Sistema de empr√©stimos  
‚úÖ Controle de penaliza√ß√µes  
‚úÖ Dashboard com estat√≠sticas  
‚úÖ Busca global  
‚úÖ Documenta√ß√£o completa  
üîÑ Testes unit√°rios (em desenvolvimento)  
‚è≥ Sistema de autentica√ß√£o (planejado)  
‚è≥ API de relat√≥rios avan√ßados (planejado)  

---

Desenvolvido com ‚ù§Ô∏è em Go
"""

print("Arquivos de configura√ß√£o e documenta√ß√£o criados:")
print("‚úì go.mod")
print("‚úì Dockerfile")
print("‚úì docker-compose.yml")
print("‚úì .env.example")
print("‚úì Makefile")
print("‚úì README.md")